From 92cc7637f5a89bf348c4d3fb2e4a1edc7c696ded Mon Sep 17 00:00:00 2001
From: Claudiu Popa <pcmanticore@gmail.com>
Date: Sat, 19 Jan 2019 17:41:54 +0100
Subject: [PATCH] Remove the restriction that "old style classes" cannot have a
 MRO.

This does not make sense any longer given that we run against Python 3
code.
Close PyCQA/pylint#2701
---
 ChangeLog               | 6 ++++++
 astroid/scoped_nodes.py | 9 +--------
 2 files changed, 7 insertions(+), 8 deletions(-)

diff --git a/astroid/scoped_nodes.py b/astroid/scoped_nodes.py
index 5457e1ff0..b94fbe49c 100644
--- a/astroid/scoped_nodes.py
+++ b/astroid/scoped_nodes.py
@@ -2764,21 +2764,14 @@ def _compute_mro(self, context=None):
         _verify_duplicates_mro(unmerged_mro, self, context)
         return _c3_merge(unmerged_mro, self, context)
 
-    def mro(self, context=None):
+    def mro(self, context=None) -> List["ClassDef"]:
         """Get the method resolution order, using C3 linearization.
 
         :returns: The list of ancestors, sorted by the mro.
         :rtype: list(NodeNG)
-
-        :raises NotImplementedError: If this is an old style class,
-            since they don't have the concept of an MRO.
         :raises DuplicateBasesError: Duplicate bases in the same class base
         :raises InconsistentMroError: A class' MRO is inconsistent
         """
-
-        if not self.newstyle:
-            raise NotImplementedError("Could not obtain mro for old-style classes.")
-
         return self._compute_mro(context=context)
 
     def bool_value(self):

